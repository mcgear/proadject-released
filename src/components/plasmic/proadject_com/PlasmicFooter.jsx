// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jwrTbggFxYGg2J5Z7e7kjr
// Component: FHue2TrcCQx
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconLink from "../../IconLink" // plasmic-import: u4_fAWBgkOK/component
import TextInput from "../../TextInput" // plasmic-import: Af92kW8SHWlh/component
import Button from "../../Button" // plasmic-import: 58aE5A8cv3Bo/component
import { useScreenVariants as useScreenVariantspl90GPsIiFl9 } from "./PlasmicGlobalVariant__Screen" // plasmic-import: PL90GPsIiFl9/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_proadject_com.module.css" // plasmic-import: jwrTbggFxYGg2J5Z7e7kjr/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: FHue2TrcCQx/css
import LogoIcon from "./icons/PlasmicIcon__Logo" // plasmic-import: cIFaNOfJhdmJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: GFiDydzZLQ1B/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon" // plasmic-import: 78HmKZmejwDt/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon" // plasmic-import: 54Gs7zR_-sHN/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon" // plasmic-import: _OvYIkcxMeTu/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspl90GPsIiFl9(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vNhjN)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__eEvRh)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u9M0Y)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__xvUI)}
            icon={
              <LogoIcon
                className={classNames(projectcss.all, sty.svg__zxnyP)}
                role={"img"}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__dxMg)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iDJpR
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Terms"}
            </p.PlasmicLink>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gmCl
              )}
            >
              {" Â· "}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ek1Dl
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Privacy"}
            </p.PlasmicLink>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cn9Wz)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xVauA)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4IPxA
              )}
            >
              {"Products"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___1YP5C
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Web Studio"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__bESct
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"DynamicBox Flex"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qhake
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Programming Forms"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__bxBlb
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Integrations"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__n5Iu3
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Command-line"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vPtx4)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sRj1P
              )}
            >
              {"Resources"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ozLHm
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Documentation"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__k47Ow
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Tutorials & Guides"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zRluh
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Blog"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yAvr4
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Support Center"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qOuKc
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Partners"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__llnsi)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1TNz
              )}
            >
              {"Company"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__pybfO
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Home"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__tFcKo
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"About us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qVhP
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Company values"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qbriu
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Pricing"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___1QV6D
              )}
              component={Link}
              href={"#"}
              platform={"gatsby"}
            >
              {"Privacy policy"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hYdS6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__voxL
              )}
            >
              {"Subscribe"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jvuN
              )}
            >
              {"Get the latest news and articles to your inbox every month."}
            </div>

            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              endIcon={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"clear"}
                  size={"compact"}
                  startIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___1BcMd)}
                      role={"img"}
                    />
                  }
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__hKqCn)}
                    role={"img"}
                  />
                </Button>
              }
              fontSize={"small"}
              placeholder={"Your email"}
              showEndIcon={"showEndIcon"}
            />
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__zOH3)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lxVsd)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__vvma9)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.link__nzQtQ
            )}
            component={Link}
            href={"https://cruip.com/"}
            platform={"gatsby"}
          >
            {"Designed by Cruip. "}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cEDtI
            )}
            component={Link}
            href={"https://www.plasmic.app/"}
            platform={"gatsby"}
          >
            {"Built in Plasmic. "}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ggUx0
            )}
          >
            {"All rights reserved."}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wghPa)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__iFaYk)}
            icon={
              <TwitterIconIcon
                className={classNames(projectcss.all, sty.svg__gn9B)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink___6Zl0M)}
            icon={
              <GithubIconIcon
                className={classNames(projectcss.all, sty.svg__fKzUr)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink___2B5YX)}
            icon={
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg__pwkE3)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "button"],
  textInput: ["textInput", "textbox", "button"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
