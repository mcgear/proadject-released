// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jwrTbggFxYGg2J5Z7e7kjr
// Component: _dnrFBHhWmF
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: DxSpBmtY3B_/component
import Section from "../../Section" // plasmic-import: 6gH0r-9r71uO/component
import Button from "../../Button" // plasmic-import: 58aE5A8cv3Bo/component
import FeatureCard from "../../FeatureCard" // plasmic-import: HbqNPS3xXHM/component
import Testimonial from "../../Testimonial" // plasmic-import: FS2pAOgnbU-/component
import HomeCta from "../../HomeCta" // plasmic-import: zKOyIPbNoEM/component
import Footer from "../../Footer" // plasmic-import: FHue2TrcCQx/component
import HabistackFooter from "../../HabistackFooter" // plasmic-import: m8MF3DD_Un/component
import { useScreenVariants as useScreenVariantspl90GPsIiFl9 } from "./PlasmicGlobalVariant__Screen" // plasmic-import: PL90GPsIiFl9/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_proadject_com.module.css" // plasmic-import: jwrTbggFxYGg2J5Z7e7kjr/projectcss
import * as sty from "./PlasmicHome.module.css" // plasmic-import: _dnrFBHhWmF/css
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow" // plasmic-import: LVHnbrY3yfYk/icon
import LightningIcon from "./icons/PlasmicIcon__Lightning" // plasmic-import: 6_DdawbAYK3j/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer" // plasmic-import: HKD0iPdLDIA_/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil" // plasmic-import: dv07vmRd0Rgw/icon
import SwapIcon from "./icons/PlasmicIcon__Swap" // plasmic-import: H8idXD_F054q/icon
import SlotIcon from "./icons/PlasmicIcon__Slot" // plasmic-import: dPaeDbPA1MCu/icon
import CycleIcon from "./icons/PlasmicIcon__Cycle" // plasmic-import: _Ng-gfmFTgiM/icon
import FacebookLogoIcon from "./icons/PlasmicIcon__FacebookLogo" // plasmic-import: -fZUytBJVury/icon
import TinderLogoIcon from "./icons/PlasmicIcon__TinderLogo" // plasmic-import: bodmtMndkLYd/icon
import AirbnbLogoIcon from "./icons/PlasmicIcon__AirbnbLogo" // plasmic-import: 1Evu_4NkILiJ/icon
import HubspotLogoIcon from "./icons/PlasmicIcon__HubspotLogo" // plasmic-import: dV8ngnxqDhJT/icon
import AmazonLogoIcon from "./icons/PlasmicIcon__AmazonLogo" // plasmic-import: Lf6YKEQZOIA1/icon
import redThinkypngNlPp3EAdz from "./images/redThinkypng.png" // plasmic-import: NLPp3EAdz/picture
import simpleProjectPdtkuo9SfnV3 from "./images/simpleProject.png" // plasmic-import: PDTKUO9SfnV3/picture

export const PlasmicHome__VariantProps = new Array()

export const PlasmicHome__ArgProps = new Array()

function PlasmicHome__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspl90GPsIiFl9(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Section
            data-plasmic-name={"topSection"}
            data-plasmic-override={overrides.topSection}
            className={classNames("__wab_instance", sty.topSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pbTnt)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mjTpm)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__d4DxI)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g9QYp
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "pROADject"
                      : "pROADject"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c0Hn9
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Weather Journeys"
                      : "Weather Journeys"}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Gbpj
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Understand the weather across your journey"
                    : "Understand the weather across your journey"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ymjau
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Currently undergoing maintenance and upgrades, your APIs will continue to work as expected."
                    : "Currently undergoing maintenance and upgrades, your \nAPIs will continue to work as expected."}
                </div>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zparf)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___4XNcI)}
                    color={"blue"}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__cfg9T)}
                        role={"img"}
                      />
                    }
                    showEndIcon={"showEndIcon"}
                  >
                    {"Start free trial"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__rli7X)}
                  >
                    {"Learn more"}
                  </Button>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__qiGz3)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yZAq9)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"632px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: redThinkypngNlPp3EAdz,
                    fullWidth: 1768,
                    fullHeight: 1722,
                    aspectRatio: undefined,
                  }}
                />
              </div>
            </p.Stack>
          </Section>

          {true ? (
            <Section
              data-plasmic-name={"solutions"}
              data-plasmic-override={overrides.solutions}
              className={classNames("__wab_instance", sty.solutions)}
              hasSubtitle={"hasSubtitle"}
              hasTitle={"hasTitle"}
              subtitle={
                "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
              }
              title={"Explore the solutions"}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__cxhDm)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7TeCa)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__crN0Q
                      )}
                    >
                      {"Powerful suite of tools"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kYBsp
                      )}
                    >
                      {
                        "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa."
                      }
                    </div>

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__m8YhE
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <LightningIcon
                          className={classNames(projectcss.all, sty.svg__m7XXb)}
                          role={"img"}
                        />
                      }
                      long={"long"}
                      title={"Building the Simple ecosystem"}
                    />

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__tIjcE
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <HammerIcon
                          className={classNames(projectcss.all, sty.svg__fCPoa)}
                          role={"img"}
                        />
                      }
                      long={"long"}
                      title={"Building the Simple Ecosystem"}
                    />

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__iDvfm
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <PencilIcon
                          className={classNames(projectcss.all, sty.svg__oz4O5)}
                          role={"img"}
                        />
                      }
                      long={"long"}
                      title={"Building the Simple Ecosystem"}
                    />
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__ksct3)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__z6I1P)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: simpleProjectPdtkuo9SfnV3,
                      fullWidth: 1000,
                      fullHeight: 924,
                      aspectRatio: undefined,
                    }}
                  />
                </div>
              </p.Stack>
            </Section>
          ) : null}
          {true ? (
            <Section
              data-plasmic-name={"howItWorks"}
              data-plasmic-override={overrides.howItWorks}
              className={classNames("__wab_instance", sty.howItWorks)}
              color={"halfDark"}
              hasSubtitle={"hasSubtitle"}
              hasTitle={"hasTitle"}
              subtitle={
                "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
              }
              title={"How Simple works"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qcXfd)}
              >
                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard___8HGcc
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SwapIcon
                      className={classNames(projectcss.all, sty.svg__jvbYa)}
                      role={"img"}
                    />
                  }
                  title={"Initial Contact"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__krfyG
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SlotIcon
                      className={classNames(projectcss.all, sty.svg__x5JjV)}
                      role={"img"}
                    />
                  }
                  title={"Discovery Session"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__zttzH
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <CycleIcon
                      className={classNames(projectcss.all, sty.svg__r7JNq)}
                      role={"img"}
                    />
                  }
                  title={"Contracting"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__iBzk4
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <HammerIcon
                      className={classNames(projectcss.all, sty.svg__gv6P)}
                      role={"img"}
                    />
                  }
                  title={"Fast Prototyping"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__tlrZ5
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <PencilIcon
                      className={classNames(projectcss.all, sty.svg__vnyms)}
                      role={"img"}
                    />
                  }
                  title={"Design Phase"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__wIMnB
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <LightningIcon
                      className={classNames(projectcss.all, sty.svg___4Tjch)}
                      role={"img"}
                    />
                  }
                  title={"Develop & Launch"}
                />
              </p.Stack>

              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__c3TgN)}
                />
              ) : null}
            </Section>
          ) : null}
          {true ? (
            <Section
              data-plasmic-name={"validation"}
              data-plasmic-override={overrides.validation}
              className={classNames("__wab_instance", sty.validation)}
              hasSubtitle={"hasSubtitle"}
              hasTitle={"hasTitle"}
              subtitle={
                "Arcu cursus vitae congue mauris rhoncus viverra nibh cras pulvinar mattis blandit libero cursus mattis."
              }
              title={"Trusted by over 20,000 companies all over the world"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5R7Sn)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mK0G)}
                >
                  <FacebookLogoIcon
                    className={classNames(projectcss.all, sty.svg__jGvKm)}
                    role={"img"}
                  />

                  <TinderLogoIcon
                    className={classNames(projectcss.all, sty.svg__htI4B)}
                    role={"img"}
                  />

                  <AirbnbLogoIcon
                    className={classNames(projectcss.all, sty.svg__aBPyO)}
                    role={"img"}
                  />

                  <HubspotLogoIcon
                    className={classNames(projectcss.all, sty.svg___9H3N1)}
                    role={"img"}
                  />

                  <AmazonLogoIcon
                    className={classNames(projectcss.all, sty.svg__ycn93)}
                    role={"img"}
                  />
                </p.Stack>

                <Testimonial
                  data-plasmic-name={"testimonial"}
                  data-plasmic-override={overrides.testimonial}
                  className={classNames("__wab_instance", sty.testimonial)}
                />
              </p.Stack>
            </Section>
          ) : null}
          {true ? (
            <HomeCta
              data-plasmic-name={"homeCta"}
              data-plasmic-override={overrides.homeCta}
              className={classNames("__wab_instance", sty.homeCta)}
            />
          ) : null}
          {true ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}

          <HabistackFooter
            data-plasmic-name={"habistackFooter"}
            data-plasmic-override={overrides.habistackFooter}
            className={classNames("__wab_instance", sty.habistackFooter)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "solutions",
    "columns",
    "howItWorks",
    "validation",
    "testimonial",
    "homeCta",
    "footer",
    "habistackFooter",
  ],

  header: ["header"],
  topSection: ["topSection"],
  solutions: ["solutions", "columns"],
  columns: ["columns"],
  howItWorks: ["howItWorks"],
  validation: ["validation", "testimonial"],
  testimonial: ["testimonial"],
  homeCta: ["homeCta"],
  footer: ["footer"],
  habistackFooter: ["habistackFooter"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHome"
  } else {
    func.displayName = `PlasmicHome.${nodeName}`
  }
  return func
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    solutions: makeNodeComponent("solutions"),
    columns: makeNodeComponent("columns"),
    howItWorks: makeNodeComponent("howItWorks"),
    validation: makeNodeComponent("validation"),
    testimonial: makeNodeComponent("testimonial"),
    homeCta: makeNodeComponent("homeCta"),
    footer: makeNodeComponent("footer"),
    habistackFooter: makeNodeComponent("habistackFooter"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
)

export default PlasmicHome
/* prettier-ignore-end */
